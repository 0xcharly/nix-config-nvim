From 3473b036ff78e773f93d37d5362a5b3a3352b3e0 Mon Sep 17 00:00:00 2001
From: Charly Delay <charly@delay.gg>
Date: Sun, 21 Jul 2024 15:29:58 +0900
Subject: [PATCH] Do not check `mtime` before writting to a file.

This patch essentially removes both warning and user confirmation input
when writting to a file which has a `mtime` value larger at the time of
saving than when last read.

While this warning can be useful in some situations, it frequently fires
when editing files on network filesystems, despite the actual content of
the file not being changed.

Inspired by https://github.com/neovim/neovim/pull/29310.
---
 src/nvim/bufwrite.c                  | 27 ----------
 test/functional/core/fileio_spec.lua | 19 +------
 test/functional/ui/input_spec.lua    | 75 ----------------------------
 3 files changed, 1 insertion(+), 120 deletions(-)

diff --color=auto -ru neovim-0.10.0/src/nvim/bufwrite.c neovim-0.10.0-patched/src/nvim/bufwrite.c
--- neovim-0.10.0/src/nvim/bufwrite.c	2024-05-16 21:34:32
+++ neovim-0.10.0-patched/src/nvim/bufwrite.c	2024-07-21 16:02:06
@@ -345,25 +345,6 @@
   return (wlen < len) ? FAIL : OK;
 }

-/// Check modification time of file, before writing to it.
-/// The size isn't checked, because using a tool like "gzip" takes care of
-/// using the same timestamp but can't set the size.
-static int check_mtime(buf_T *buf, FileInfo *file_info)
-{
-  if (buf->b_mtime_read != 0
-      && time_differs(file_info, buf->b_mtime_read, buf->b_mtime_read_ns)) {
-    msg_scroll = true;  // Don't overwrite messages here.
-    msg_silent = 0;     // Must give this prompt.
-    // Don't use emsg() here, don't want to flush the buffers.
-    msg(_("WARNING: The file has been changed since reading it!!!"), HL_ATTR(HLF_E));
-    if (ask_yesno(_("Do you really want to write to it"), true) == 'n') {
-      return FAIL;
-    }
-    msg_scroll = false;  // Always overwrite the file message now.
-  }
-  return OK;
-}
-
 /// Generate a BOM in "buf[4]" for encoding "name".
 ///
 /// @return  the length of the BOM (zero when no BOM).
@@ -710,14 +691,6 @@
         *err = set_err_num("E505", _("is read-only (add ! to override)"));
       }
       return FAIL;
-    }
-
-    // If 'forceit' is false, check if the timestamp hasn't changed since reading the file.
-    if (overwriting && !forceit) {
-      int retval = check_mtime(buf, file_info_old);
-      if (retval == FAIL) {
-        return FAIL;
-      }
     }
   }
   return OK;
diff --color=auto -ru neovim-0.10.0/test/functional/core/fileio_spec.lua neovim-0.10.0-patched/test/functional/core/fileio_spec.lua
--- neovim-0.10.0/test/functional/core/fileio_spec.lua	2024-05-16 21:34:32
+++ neovim-0.10.0-patched/test/functional/core/fileio_spec.lua	2024-07-21 16:02:29
@@ -297,24 +297,7 @@
     -- Set the file's access/update time to be
     -- greater than the time at which it was created.
     uv.fs_utime('Xtest-overwrite-forced', future_time, future_time)
-    -- use async feed_command because nvim basically hangs on the prompt
-    feed_command('w')
-    screen:expect([[
-      {2:WARNING: The file has been changed since}|
-      {2: reading it!!!}                          |
-      {3:Do you really want to write to it (y/n)?}|
-      ^                                        |
-    ]])
-
-    feed('n')
-    feed('<cr>')
-    screen:expect([[
-      ^foobar                                  |
-      {1:~                                       }|*2
-                                              |
-    ]])
-    -- Use a screen test because the warning does not set v:errmsg.
-    command('w!')
+    command('w')
     screen:expect([[
       ^foobar                                  |
       {1:~                                       }|*2
diff --color=auto -ru neovim-0.10.0/test/functional/ui/input_spec.lua neovim-0.10.0-patched/test/functional/ui/input_spec.lua
--- neovim-0.10.0/test/functional/ui/input_spec.lua	2024-05-16 21:34:32
+++ neovim-0.10.0-patched/test/functional/ui/input_spec.lua	2024-07-21 16:02:54
@@ -320,81 +320,6 @@
   expect('xb')
 end)

-describe('input non-printable chars', function()
-  after_each(function()
-    os.remove('Xtest-overwrite')
-  end)
-
-  it("doesn't crash when echoing them back", function()
-    write_file('Xtest-overwrite', [[foobar]])
-    local screen = Screen.new(60, 8)
-    screen:attach()
-    command('set shortmess-=F')
-
-    feed_command('e Xtest-overwrite')
-    screen:expect([[
-      ^foobar                                                      |
-      {1:~                                                           }|*6
-      "Xtest-overwrite" [noeol] 1L, 6B                            |
-    ]])
-
-    -- Wait for some time so that the timestamp changes.
-    vim.uv.sleep(10)
-    write_file('Xtest-overwrite', [[smurf]])
-    feed_command('w')
-    screen:expect([[
-      foobar                                                      |
-      {1:~                                                           }|*3
-      {3:                                                            }|
-      "Xtest-overwrite"                                           |
-      {9:WARNING: The file has been changed since reading it!!!}      |
-      {6:Do you really want to write to it (y/n)?}^                    |
-    ]])
-
-    feed('u')
-    screen:expect([[
-      foobar                                                      |
-      {1:~                                                           }|*2
-      {3:                                                            }|
-      "Xtest-overwrite"                                           |
-      {9:WARNING: The file has been changed since reading it!!!}      |
-      {6:Do you really want to write to it (y/n)?}u                   |
-      {6:Do you really want to write to it (y/n)?}^                    |
-    ]])
-
-    feed('\005')
-    screen:expect([[
-      foobar                                                      |
-      {1:~                                                           }|
-      {3:                                                            }|
-      "Xtest-overwrite"                                           |
-      {9:WARNING: The file has been changed since reading it!!!}      |
-      {6:Do you really want to write to it (y/n)?}u                   |
-      {6:Do you really want to write to it (y/n)?}                    |
-      {6:Do you really want to write to it (y/n)?}^                    |
-    ]])
-
-    feed('n')
-    screen:expect([[
-      foobar                                                      |
-      {3:                                                            }|
-      "Xtest-overwrite"                                           |
-      {9:WARNING: The file has been changed since reading it!!!}      |
-      {6:Do you really want to write to it (y/n)?}u                   |
-      {6:Do you really want to write to it (y/n)?}                    |
-      {6:Do you really want to write to it (y/n)?}n                   |
-      {6:Press ENTER or type command to continue}^                     |
-    ]])
-
-    feed('<cr>')
-    screen:expect([[
-      ^foobar                                                      |
-      {1:~                                                           }|*6
-                                                                  |
-    ]])
-  end)
-end)
-
 describe('event processing and input', function()
   it('not blocked by event bursts', function()
     api.nvim_set_keymap(
